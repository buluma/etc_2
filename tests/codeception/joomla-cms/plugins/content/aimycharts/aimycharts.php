<?php
/*
 * Copyright (c) 2013-2017 Aimy Extensions, Lingua-Systems Software GmbH
 *
 * http://www.aimy-extensions.com/
 *
 * License: GNU GPLv2, see LICENSE.txt within distribution and/or
 *          http://www.aimy-extensions.com/software-license.html
 */
 defined( '_JEXEC' ) or die(); jimport( 'joomla.plugin.plugin' ); require_once( dirname( __FILE__ ) . DIRECTORY_SEPARATOR . 'contentpluginhelper.php' ); class plgContentAimyCharts extends JPlugin { static private $script_added = false; static private $notice_shown = false; private $count = 0; private $js = null; public function onContentPrepare( $ctx, &$article, &$params, $page = 0 ) { $this->js = array(); $supportedTypes = array( 'Line', 'Bar', 'Pie', 'Doughnut' ); $types = implode( '|', $supportedTypes ); $doc = JFactory::getDocument(); $regex = '/' . '(?:<p>)?\s*' . '\{(?:Aimy)?Charts?:*(' . $types . ')?\b' . '([^\}]+)?\}' . '(.*?)' . '\{\/(?:Aimy)?Charts?:*(?:' . $types . ')?\}' . '\s*(?:<\/p>)?' . '/is'; while ( preg_match( $regex, $article->text, $m ) ) { $type = empty( $m[ 1 ] ) ? 'Pie' : $m[ 1 ]; $data = AimyChartsContentPluginHelper::parse_editor_html( $m[ 3 ] ); $opt = array( 'responsive' => $this->params->get( 'responsive', false ), 'width' => $this->params->get( 'width', 440 ), 'height' => $this->params->get( 'height', 320 ), 'animate' => $this->params->get( 'animate', false ) ); if ( count( $m ) > 2 && ! empty( $m[ 2 ] ) && ! self::$notice_shown ) { JFactory::getLanguage()->load( 'plg_content_aimycharts', JPATH_ADMINISTRATOR ); JFactory::getApplication()->enqueueMessage( JText::_( 'AIMY_CHARTS_NOTICE_PRO' ) . ' ' . '<a href="https://www.aimy-extensions.com/joomla/charts.html">' . '<strong>Aimy Charts Pro</strong> ' . '</a>!', 'notice' ); self::$notice_shown = true; } $method = '_create_' . strtolower( $type ) . '_chart'; $block = $this->$method( $data, $opt ); $article->text = str_replace( $m[ 0 ], $block, $article->text ); $this->count++; } if ( ! empty( $this->js ) ) { if ( ! self::$script_added ) { JHtml::_( 'jquery.framework' ); $doc->addScript( JURI::base( true ) . '/media/plg_aimycharts/aimycharts.js' . '?r=3.11.0' ); self::$script_added = true; } $doc->addScriptDeclaration( 'jQuery(document).ready(function(){' . 'try {' . ( implode( "\n", $this->js ) ) . '}' . 'catch(e){}' . '});' ); } } private function _create_pie_chart( $data, $opt, $type = 'Pie' ) { if ( empty( $data ) ) { return ''; } $id = self::_get_canvas_id( $this->count ); $sets = self::_parse_data( $data ); $cd = array(); foreach ( $sets as $set ) { $c = self::_fix_color( count( $set ) > 2 ? $set[ 2 ] : null ); $cd[] = array( 'label' => trim( $set[ 0 ] ), 'value' => (float) $set[ 1 ], 'color' => $c, 'highlight' => self::_reduce_color_opacity( $c ) ); } $this->js[] = 'new AimyChartsChart(' . "jQuery('#$id').get(0).getContext('2d')" . ').' . $type . '( ' . AimyChartsContentPluginHelper::phpva_json_encode( $cd ) . ',' . '{ ' . 'animation: ' . ( $opt[ 'animate' ] ? 'true' : 'false' ) . '}' . ');'; return self::_get_canvas( $type, $this->count, $opt ); } private function _create_doughnut_chart( $data, $opt ) { return $this->_create_pie_chart( $data, $opt, 'Doughnut' ); } private function _create_bar_chart( $data, $opt ) { if ( empty( $data ) ) { return ''; } $id = self::_get_canvas_id( $this->count ); $sets = self::_parse_data( $data, 3 ); $cd = self::_resort_sets( $sets ); $this->js[] = 'new AimyChartsChart(' . "jQuery('#$id').get(0).getContext('2d')" . ').Bar(' . AimyChartsContentPluginHelper::phpva_json_encode( $cd ) . ',' . '{' . 'animation: ' . ( $opt[ 'animate' ] ? 'true' : 'false' ) . ',' . 'multiTooltipTemplate: ' . '"<%= value %> (<%= datasetLabel %>)"' . '}' . ');'; return self::_get_canvas( 'Bar', $this->count, $opt ); } private function _create_line_chart( $data, $opt ) { if ( empty( $data ) ) { return ''; } $id = self::_get_canvas_id( $this->count ); $sets = self::_parse_data( $data, 3 ); $cd = self::_resort_sets( $sets, true ); $this->js[] = 'new AimyChartsChart(' . "jQuery('#$id').get(0).getContext('2d')" . ').Line(' . AimyChartsContentPluginHelper::phpva_json_encode( $cd ) . ',' . '{' . 'animation: ' . ( $opt[ 'animate' ] ? 'true' : 'false' ) . ',' . 'multiTooltipTemplate: ' . '"<%= value %> (<%= datasetLabel %>)"' . '}' . ');'; return self::_get_canvas( 'Line', $this->count, $opt ); } static private function _resort_sets( &$sets, $transparent = false ) { $vals = array(); $colors = array(); $cd = array( 'labels' => array(), 'datasets' => array() ); foreach ( $sets as $set ) { $label = trim( $set[ 0 ] ); $name = trim( $set[ 1 ] ); if ( ! in_array( $label, $cd[ 'labels' ] ) ) { $cd[ 'labels' ][] = $label; } if ( ! isset( $vals[ $name ] ) ) { $vals[ $name ] = array(); $colors[ $name ] = self::_fix_color( null, 0.8 ); } $vals[ $name ][] = (float) $set[ 2 ]; if ( count( $set ) == 4 ) { $colors[ $name ] = self::_fix_color( $set[ 3 ] ); } } foreach ( $vals as $name => $val ) { $c = $colors[ $name ]; $cd[ 'datasets' ][] = array( 'label' => $name, 'data' => $val, 'strokeColor' => $c, 'pointColor' => $c, 'fillColor' => $transparent ? 'transparent' : self::_reduce_color_opacity( $c ), 'highlightStroke' => self::_reduce_color_opacity( $c ), 'highlightFill' => self::_reduce_color_opacity( $c, 0.4 ) ); } return $cd; } static private function _parse_data( &$data = '', $min = 2 ) { $sets = array(); $lines = AimyChartsContentPluginHelper::split_lines( $data ); foreach ( $lines as $line ) { if ( empty( $line ) ) { continue; } $a = AimyChartsContentPluginHelper::parse_line( $line ); if ( count( $a ) < $min ) { JFactory::getLanguage()->load( 'plg_content_aimycharts', JPATH_ADMINISTRATOR ); JFactory::getApplication()->enqueueMessage( JText::_( 'AIMY_CHARTS_ERR_SYNTAX' ) . ': ' . '"<code>' . htmlspecialchars( $line ) . '</code>"', 'error' ); continue; } $sets[] = $a; } return $sets; } static private function _get_canvas( $cls_sfx, $n, &$opt ) { return sprintf( '<div class="AimyCharts AimyCharts%s" id="%s">' . '<canvas id="%s" width="%d" height="%d"></canvas>' . '</div>', $cls_sfx, self::_get_container_id( $n ), self::_get_canvas_id( $n ), (int) $opt[ 'width' ], (int) $opt[ 'height' ] ) . "\n"; } static private function _get_canvas_id( $cnt = 0 ) { return 'aimycharts' . ( $cnt + 1 ); } static private function _get_container_id( $cnt = 0 ) { return 'AimyChart' . ( $cnt + 1 ); } static private function _fix_color( $c, $opacity = 1.0 ) { if ( empty( $c ) ) { return self::_fix_color( '#333' ); } $c = trim( $c ); if ( preg_match( '/^(?:[\da-f]{3}|[\da-f]{6})$/i', $c ) ) { $c = '#' . $c; } if ( strpos( $c, '#' ) === 0 ) { $len = strlen( $c ); if ( $len === 4 or $len === 7 ) { if ( $len === 4 ) { $r = substr( $c, 1, 1 ); $g = substr( $c, 2, 1 ); $b = substr( $c, 3, 1 ); $r .= $r; $g .= $g; $b .= $b; } else { $r = substr( $c, 1, 2 ); $g = substr( $c, 3, 2 ); $b = substr( $c, 5, 2 ); } $c = sprintf( 'rgba(%d,%d,%d,%.1f)', hexdec( $r ), hexdec( $g ), hexdec( $b ), $opacity ); } } return $c; } static private function _reduce_color_opacity( $c, $by = 0.2 ) { preg_match( '/^rgba\([\d\s]+,[\d\s]+,[\d\s]+,\s*([01]\.\d)\s*\)$/', $c, $m ); if ( count( $m ) ) { $opa = $m[1]; if ( $opa - $by > 0.2 ) { $opa -= $by; $c = preg_replace( '/[01]\.\d\s*\)$/', $opa . ')', $c ); } } return $c; } } 
